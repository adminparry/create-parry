package com.example.demo.utils;

import org.apache.ddlutils.Platform;
import org.apache.ddlutils.PlatformFactory;
import org.apache.ddlutils.model.Database;
import org.apache.ddlutils.model.Table;
import org.quartz.utils.DBConnectionManager;

import javax.sql.DataSource;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class DDLUtil {

    private static final String username = "postgres";
    private static final String username1 = "root";

    private static final String password = "123456";
    private static final String jbdcUrl1 = "jdbc:mysql://192.168.2.2:3306/demo?useSSL=false&serverTimezone=UTC";
    private static final String jbdcUrl = "jdbc:postgresql://192.168.2.2:5432/public?useSSL=false&serverTimezone=UTC";

    public static void main(String[] args) {
        postgres();

    }
    public static void mysql(){
        try (Connection conn = DriverManager.getConnection(jbdcUrl1, username1, password)) {
           String ret  = getMySQLTableDDL(conn, "user");

           writeFile(GenerateCodeUtil.getJavaSourcePath("template-springboot.src.main.resources.ddl.") + "mysql.sql", ret);
        } catch (SQLException | IOException e) {
            throw new RuntimeException(e);
        }
    }
    public static void postgres(){
        try (Connection conn = DriverManager.getConnection(jbdcUrl, username, password)) {
            String ret = getPostgresTableDDL(conn, "public","users");

            writeFile(GenerateCodeUtil.getJavaSourcePath("template-springboot.src.main.resources.ddl.") + "postgres.sql", ret);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    public static void writeFile(String p, String content) throws IOException {

        try(FileWriter writer = new FileWriter(p)) {
            writer.write(content);
        }
    }
    private static String sql(String schema, String tableName){
        String sql =
                "WITH table_def AS (\n" +
                "    SELECT \n" +
                "        'CREATE TABLE ' || n.nspname || '.' || c.relname || E' (\\n' ||\n" +
                "        string_agg(\n" +
                "            '    ' || a.attname || ' ' || \n" +
                "            pg_catalog.format_type(a.atttypid, a.atttypmod) ||\n" +
                "            CASE \n" +
                "                WHEN a.attnotnull THEN ' NOT NULL'\n" +
                "                ELSE ''\n" +
                "            END ||\n" +
                "            CASE\n" +
                "                WHEN a.attidentity = 'a' THEN ' GENERATED ALWAYS AS IDENTITY'\n" +
                "                WHEN a.attidentity = 'd' THEN ' GENERATED BY DEFAULT AS IDENTITY'\n" +
                "                ELSE ''\n" +
                "            END ||\n" +
                "            CASE\n" +
                "                WHEN a.atthasdef THEN ' DEFAULT ' || pg_get_expr(ad.adbin, ad.adrelid)\n" +
                "                ELSE ''\n" +
                "            END,\n" +
                "            E',\\n'\n" +
                "        ) || E'\\n);' AS create_table\n" +
                "    FROM \n" +
                "        pg_class c\n" +
                "    JOIN \n" +
                "        pg_namespace n ON n.oid = c.relnamespace\n" +
                "    JOIN \n" +
                "        pg_attribute a ON a.attrelid = c.oid\n" +
                "    LEFT JOIN \n" +
                "        pg_attrdef ad ON (ad.adrelid = a.attrelid AND ad.adnum = a.attnum)\n" +
                "    WHERE \n" +
                "        c.relname = '"+tableName+"'\n" +
                "        AND n.nspname = '"+schema+"'\n" +
                "        AND a.attnum > 0\n" +
                "        AND NOT a.attisdropped\n" +
                "    GROUP BY \n" +
                "        n.nspname, c.relname\n" +
                "),\n" +
                "constraints AS (\n" +
                "    SELECT \n" +
                "        'ALTER TABLE ' || n.nspname || '.' || c.relname || \n" +
                "        ' ADD CONSTRAINT ' || con.conname || ' ' || pg_get_constraintdef(con.oid) || ';' AS constraint_def\n" +
                "    FROM \n" +
                "        pg_constraint con\n" +
                "    JOIN \n" +
                "        pg_class c ON c.oid = con.conrelid\n" +
                "    JOIN \n" +
                "        pg_namespace n ON n.oid = c.relnamespace\n" +
                "    WHERE \n" +
                "        c.relname = '"+tableName+"'\n" +
                "        AND n.nspname = '"+schema+"'\n" +
                "        AND con.contype IN ('p', 'u', 'f')  -- 主键、唯一约束、外键\n" +
                "),\n" +
                "indexes AS (\n" +
                "    SELECT \n" +
                "        indexdef || ';' AS index_def\n" +
                "    FROM \n" +
                "        pg_indexes\n" +
                "    WHERE \n" +
                "        tablename = '"+tableName+"'\n" +
                "        AND schemaname = '"+schema+"'\n" +
                ")\n" +
                "SELECT create_table FROM table_def\n" +
                "UNION ALL\n" +
                "SELECT constraint_def FROM constraints\n" +
                "UNION ALL\n" +
                "SELECT index_def FROM indexes;";

        return sql;
    }
    public static String getPostgresTableDDL(Connection conn, String schema, String tableName) throws SQLException {
        StringBuilder ddl = new StringBuilder();
        try (Statement stmt = conn.createStatement()) {
            try (ResultSet rs = stmt.executeQuery(sql(schema, tableName))) {

                while (rs.next()) {

                    ddl.append(rs.getString(1)).append("\n");
                }
            }
        }
        return ddl.toString();
    }
    // MySQL 示例
    public static String getMySQLTableDDL(Connection conn, String tableName) throws SQLException {
        String sql = "SHOW CREATE TABLE " + tableName;
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                return rs.getString(2); // 第二列是完整的CREATE TABLE语句
            }
        }
        return null;
    }

}